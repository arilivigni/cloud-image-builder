- hosts: localhost
  connection: local
  gather_facts: False

  tasks:

    - name: Provision a set of instances
      ec2:
         assign_public_ip: yes
         key_name: rwsu-aws-sysdeseng
         group: rwsu-vpc-secgroup
#         instance_type: i3.metal
         instance_type: t2.medium
# original rhel image
#         image: "ami-0e087c71"
#
         image: "ami-5e83f321"
         wait: true
         exact_count: 1
         count_tag:
            Name: rwsu-rhel-test
         instance_tags:
            Name: rwsu-rhel-test
         region: us-east-1
         volumes:
           - device_name: /dev/sda1
             volume_type: gp2
             volume_size: 29
             delete_on_termination: true
         vpc_subnet_id: subnet-a3179be9
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: launched
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 600
        state: started
      with_items: "{{ ec2.instances }}"

    - name: Make sure the known hosts file exists
      file: "path={{ ssh_known_hosts_file }} state=touch"

    - name: Check host name availability
      shell: "ssh-keygen -f {{ ssh_known_hosts_file }} -F {{ item.public_dns_name }}"
      with_items: "{{ ec2.instances }}"
      register: z_ssh_known_host_results
      ignore_errors: yes

    - name: Scan the public key
      shell: "{{ ssh_known_hosts_command}} {{ item.item.public_dns_name }} >> {{ ssh_known_hosts_file }}"
      with_items: "{{ z_ssh_known_host_results.results }}"
      when: item.stdout == ""

- name: Run tests on instance
  hosts: launched
  user: ec2-user
  become: True
  gather_facts: True
  tasks: 
    - name: copy yaml files
      copy:
        src: ./tests/
        dest: /home/ec2-user/tests/
        owner: ec2-user
        group: ec2-user

    - name: create hostpath storage class
      command: kubectl apply -f /home/ec2-user/tests/storage-setup.yaml

    - name: create cdi provisioner
      command: kubectl apply -f /home/ec2-user/tests/cdi-setup.yaml

    - name: wait for cdi-deployment pod to become Running
      shell: kubectl get pods | grep cdi-deployment
      register: cdi_deployment_status
      until: cdi_deployment_status.stdout.find("Running") != -1
      retries: 30
      delay: 10

    - name: deploy vm
      command: kubectl apply -f /home/ec2-user/tests/cirros-pvc.yaml

    - name: wait for cirros-pvc to become Bound
      shell: kubectl get pvc | grep cirros-pvc
      register: cirros_pvc_status
      until: cirros_pvc_status.stdout.find("Bound") != -1
      retries: 12
      delay: 5

    - name: deploy vm
      command: kubectl apply -f /home/ec2-user/tests/cirros-vm.yaml

    - name: wait for cirros vm to be Running
      shell: kubectl describe vm cirros-vm | grep Phase
      register: cirros_vm_status
      until: cirros_vm_status.stdout.find("Running") != -1
      retries: 30
      delay: 10
